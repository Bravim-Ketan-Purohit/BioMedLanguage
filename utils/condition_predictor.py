import logging
from utils.llm_client import ask_medllama

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


def predict_conditions(processed_data):
    """
    Predict medical conditions using clinical summary + extracted keywords.
    """
    try:
        logger.info("Predicting conditions using extracted keywords + summary.")

        if not processed_data.get('clinical_summary') or not processed_data.get('identified_keywords'):
            logger.warning("Missing necessary data for condition prediction.")
            return ["No conditions predicted"]

        # Form the context
        bullet_points = "\n".join(
            [bp['bullet_point'] for bp in processed_data['clinical_summary']]
        )
        keywords_text = ", ".join(processed_data['identified_keywords'])

        # LLM Prompt
        condition_prompt = f"""
        You are a clinical diagnosis expert.

        Based on the following findings and keywords, predict the most likely medical conditions:
        - List top 5 conditions that you can think of upon seeing and reading the report.
        - Only predict conditions if findings strongly suggest them.
        - If findings are vague or insufficient, respond "Inconclusive. but this should not happen very often as the report we are giving you are very good and literally generated by hospital"

        --- Clinical Bullet Points ---
        {bullet_points}

        --- Identified Keywords ---
        {keywords_text}
        """

        prediction_response = ask_medllama(condition_prompt)
        conditions = parse_predicted_conditions(prediction_response)

        return conditions

    except Exception as e:
        logger.error(f"Error during condition prediction: {str(e)}")
        return ["Prediction Failed"]


def parse_predicted_conditions(response_text):
    """
    Parse condition names from LLM output.
    """
    conditions = []
    lines = response_text.splitlines()
    for line in lines:
        if line.strip():
            condition = line.replace('-', '').strip()
            if condition.lower() != "inconclusive":
                conditions.append(condition)
    return conditions
